// Core initialization logic\n// Reads manifest.config.js, initializes shared services, runs enabled scripts\n\n// Import necessary things, e.g., the scripts array from the manifest\n// import { scripts } from \'../../../manifest.config.js\'; // Adjust path as needed based on build/runtime\n// import { initCache } from \'../services/caching/initCache.js\';\n// import { Logger } from \'../helpers/Logger.js\';\n\n// const log = new Logger(\"CoreInit\");\n\nexport async function initCore() {\n  console.log(\"HQ Userscripts: Core Initialization Started.\");\n  // const log = new Logger(\"CoreInit\"); // Instantiate logger here if needed early\n  // log.info(\"Core Initialization Started.\");\n\n  try {\n    // 1. Initialize Shared Services\n    // log.info(\"Initializing shared services...\");\n    // await initCache(); // Example\n    // log.info(\"Shared services initialized.\");\n\n    // 2. Dynamically Import and Run Enabled Scripts in Order\n    // log.info(\"Loading and initializing enabled scripts...\");\n    // const { scripts } = await import(\'../../../manifest.config.js\'); // Dynamic import might be needed\n\n    /*\n    for (const script of scripts) {\n      if (script.enabled && script.path) {\n        log.debug(`Attempting to load script: ${script.name} (ID: ${script.id})`);\n        try {\n          const scriptModule = await import(/* @vite-ignore */ \`../../\${script.path}\`);\n          if (scriptModule.default && typeof scriptModule.default === \'function\') {\n            log.info(`Initializing script: ${script.name}`);\n            await scriptModule.default(); // Assuming the script exports a default init function\n            log.info(`Script ${script.name} initialized successfully.`);\n          } else {\n            log.warn(`Script ${script.name} (path: ${script.path}) does not have a default export function.`);\n          }\n        } catch (error) {\n          log.error(`Failed to load or initialize script ${script.name} (ID: ${script.id}):`, error);\n        }\n      } else if (script.enabled) {\n         log.debug(`Script ${script.name} (ID: ${script.id}) is enabled but has no path (likely core setup).`);\n      }\n       else {\n         log.debug(`Script ${script.name} (ID: ${script.id}) is disabled.`);\n       }\n    }\n    */\n\n    // log.info(\"All enabled scripts processed.\");\n\n  } catch (error) {\n    // log.error(\"Critical error during core initialization:\", error);\n    console.error(\"Critical error during core initialization:\", error);\n  }\n\n  console.log(\"HQ Userscripts: Core Initialization Finished.\");\n}\n